{"job":{"components":{"20811":{"id":20811,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-32,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[20815],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"20812":{"id":20812,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":96,"y":-16,"width":32,"height":32,"inputConnectorIDs":[20815],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[21366],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python Script 0"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print (myvar)\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nfrom boto.s3.connection import S3Connection\nimport boto3\n\nimport subprocess\nimport sys\nimport pandas as pd\nfrom io import StringIO\n\ntable_name = 'drnewm3fdta_MITBALS'\nfile_name_pref = 'MITBAL_DLTF/'\nbucket_name = 'iprosis-test-1'\nfile_size = 200000\n\n\n\napi_auth=HTTPBasicAuth('mattilion', 'D0etvXf2bOv$')\n#def install(package):\n#    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n\n#install('pandas')\n#api_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/drusactda_CSYTABS?$skip=10&$top=10&$count=true\"\napi_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/%s?\" % (table_name)\ns3 = boto3.resource('s3')\nfile_counter = 1\nfirst_loop = True\nnumber_of_rows = 0\nwhile api_url != '':\n  try:\n    response = requests.get(api_url,auth=api_auth,headers={\"Prefer\": \"odata.maxpagesize=200000\"})\n    response_json = response.json()\n  \n    if \"@odata.nextLink\" in response_json:\n      api_url = 'https' + response_json['@odata.nextLink'][4:]       \n    else:\n      api_url = ''\n    chunk_df = pd.DataFrame(response_json['value'])\n  \n    if first_loop:\n      main_df = chunk_df\n      first_loop = False\n      number_of_rows = len(chunk_df.index)\n    elif number_of_rows >= file_size or api_url == '':\n      csv_buffer = StringIO()\n      main_df.to_csv(csv_buffer,index=False)\n      file_name = file_name_pref + str(file_counter) + '.csv'\n      object = s3.Object(bucket_name, file_name)\n      object.put(Body=csv_buffer.getvalue())\n      main_df = chunk_df\n      number_of_rows = len(chunk_df.index)\n      file_counter = file_counter + 1\n    else:\n      frames = [main_df, chunk_df]\n      main_df = pd.concat(frames)\n      number_of_rows = number_of_rows + len(chunk_df.index)\n  except SocketError as e:\n    if e.errno == errno.ECONNRESET:\n        continue\ncsv_buffer = StringIO()\nmain_df.to_csv(csv_buffer,index=False)\nfile_name = file_name_pref + str(file_counter) + '.csv'\nobject = s3.Object(bucket_name, file_name)\nobject.put(Body=csv_buffer.getvalue())\t\t\n#    \n#print(json.dumps(response.json(), indent=2))\n# = pd.read_json(response.json(), orient='index')\n#\n#print(pdObj)\n#print(json.dumps(response.json(), indent=2))\n#context.updateVariable('val_skip', 100)\n\n\n#object.put(Body=response.read())\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"7200000"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"20813":{"id":20813,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":208,"y":-16,"width":32,"height":32,"inputConnectorIDs":[21366],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Count"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print (myvar)\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nfrom boto.s3.connection import S3Connection\nimport boto3\n\nimport subprocess\nimport sys\nimport pandas as pd\nfrom io import StringIO\n\ntable_name = 'drusactda_OSBSTDS'\nfile_name_pref = 'OSBSTD/'\nbucket_name = 'iprosis-test-1'\n\napi_auth=HTTPBasicAuth('mattilion', 'D0etvXf2bOv$')\n#def install(package):\n#    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n\n#install('pandas')\n#api_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/drusactda_CSYTABS?$skip=10&$top=10&$count=true\"\napi_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/%s?$count=true\" % (table_name)\ns3 = boto3.resource('s3')\nfile_counter = 1\n\nwhile api_url != '':\nresponse = requests.get(api_url,auth=api_auth)\nresponse_json = response.json()\ndf = pd.DataFrame(response_json['value'])\ncsv_buffer = StringIO()\ndf.to_csv(csv_buffer,index=False)\nfile_name = file_name_pref + str(file_counter) + '.csv'\nobject = s3.Object(bucket_name, file_name)\nobject.put(Body=csv_buffer.getvalue())\n\n  \n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"20814":{"id":20814,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":368,"y":128,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Delete_files"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"from boto.s3.connection import S3Connection\nimport boto3\n\n#file_name = 'CSYTAB.csv'\n#print(file_name[0:len(file_name)-4])\n#CSYTAB\n#OSBSTD\ns3 = boto3.resource('s3')\nbucket = s3.Bucket('iprosis-test-1')\nbucket.objects.filter(Prefix=\"CSYTAB/\").delete()"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"20815":{"id":20815,"sourceID":20811,"targetID":20812},"21366":{"id":21366,"sourceID":20812,"targetID":20813}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{"filename":{"definition":{"name":"filename","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""}},"grids":{}},"info":{"name":"Copy of DLTF_MITBAL","description":"","type":"ORCHESTRATION","tag":"73717ef7-5373-406f-a262-df355ab6b713"}}