{"job":{"components":{"8305":{"id":8305,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":-368,"y":-48,"width":32,"height":32,"inputConnectorIDs":[8354],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[8386],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"OCUSMA"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print (myvar)\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nfrom boto.s3.connection import S3Connection\nimport boto3\n\nimport subprocess\nimport sys\nimport pandas as pd\nfrom io import StringIO\n\ntable_name = 'drusactda_OCUSMAS'\nfile_name_pref = 'DRUS_OCUSMA/'\nbucket_name = 'iprosis-test-1'\nfile_size = 200000\n\n\n\napi_auth=HTTPBasicAuth('mattilion', 'D0etvXf2bOv$')\n#def install(package):\n#    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n\n#install('pandas')\n#api_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/drusactda_CSYTABS?$skip=10&$top=10&$count=true\"\napi_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/%s\" % (table_name)\ns3 = boto3.resource('s3')\nfile_counter = 1\nfirst_loop = True\nnumber_of_rows = 0\nwhile api_url != '':\n  try:\n    response = requests.get(api_url,auth=api_auth,headers={\"Prefer\": \"odata.maxpagesize=50000\"})\n    response_json = response.json()\n  \n    if \"@odata.nextLink\" in response_json:\n      api_url = 'https' + response_json['@odata.nextLink'][4:]       \n    else:\n      api_url = ''\n    chunk_df = pd.DataFrame(response_json['value'])\n  \n    if first_loop:\n      main_df = chunk_df\n      first_loop = False\n      number_of_rows = len(chunk_df.index)\n    elif number_of_rows >= file_size or api_url == '':\n      csv_buffer = StringIO()\n      main_df.to_csv(csv_buffer,index=False)\n      file_name = file_name_pref + str(file_counter) + '.csv'\n      object = s3.Object(bucket_name, file_name)\n      object.put(Body=csv_buffer.getvalue())\n      main_df = chunk_df\n      number_of_rows = len(chunk_df.index)\n      file_counter = file_counter + 1\n    else:\n      frames = [main_df, chunk_df]\n      main_df = pd.concat(frames)\n      number_of_rows = number_of_rows + len(chunk_df.index)\n  except SocketError as e:\n    if e.errno == errno.ECONNRESET:\n        continue\n\t\n#    \n#print(json.dumps(response.json(), indent=2))\n# = pd.read_json(response.json(), orient='index')\n#\n#print(pdObj)\n#print(json.dumps(response.json(), indent=2))\n#context.updateVariable('val_skip', 100)\n\n\n#object.put(Body=response.read())\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"7200000"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"8343":{"id":8343,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-480,"y":-48,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[8354],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"8368":{"id":8368,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":-256,"y":-48,"width":32,"height":32,"inputConnectorIDs":[8386],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[8417],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"OCUSAD"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print (myvar)\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nfrom boto.s3.connection import S3Connection\nimport boto3\n\nimport subprocess\nimport sys\nimport pandas as pd\nfrom io import StringIO\n\ntable_name = 'drusactda_OCUSADS'\nfile_name_pref = 'DRUS_OCUSAD/'\nbucket_name = 'iprosis-test-1'\nfile_size = 200000\n\n\n\napi_auth=HTTPBasicAuth('mattilion', 'D0etvXf2bOv$')\n#def install(package):\n#    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n\n#install('pandas')\n#api_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/drusactda_CSYTABS?$skip=10&$top=10&$count=true\"\napi_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/%s\" % (table_name)\ns3 = boto3.resource('s3')\nfile_counter = 1\nfirst_loop = True\nnumber_of_rows = 0\nwhile api_url != '':\n  try:\n    response = requests.get(api_url,auth=api_auth,headers={\"Prefer\": \"odata.maxpagesize=50000\"})\n    response_json = response.json()\n  \n    if \"@odata.nextLink\" in response_json:\n      api_url = 'https' + response_json['@odata.nextLink'][4:]       \n    else:\n      api_url = ''\n    chunk_df = pd.DataFrame(response_json['value'])\n  \n    if first_loop:\n      main_df = chunk_df\n      first_loop = False\n      number_of_rows = len(chunk_df.index)\n    elif number_of_rows >= file_size or api_url == '':\n      csv_buffer = StringIO()\n      main_df.to_csv(csv_buffer,index=False)\n      file_name = file_name_pref + str(file_counter) + '.csv'\n      object = s3.Object(bucket_name, file_name)\n      object.put(Body=csv_buffer.getvalue())\n      main_df = chunk_df\n      number_of_rows = len(chunk_df.index)\n      file_counter = file_counter + 1\n    else:\n      frames = [main_df, chunk_df]\n      main_df = pd.concat(frames)\n      number_of_rows = number_of_rows + len(chunk_df.index)\n  except SocketError as e:\n    if e.errno == errno.ECONNRESET:\n        continue\n\t\n#    \n#print(json.dumps(response.json(), indent=2))\n# = pd.read_json(response.json(), orient='index')\n#\n#print(pdObj)\n#print(json.dumps(response.json(), indent=2))\n#context.updateVariable('val_skip', 100)\n\n\n#object.put(Body=response.read())\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"7200000"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"8409":{"id":8409,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":-160,"y":-48,"width":32,"height":32,"inputConnectorIDs":[8417],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[8446],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drnewm3fdta_CPNMAS"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print (myvar)\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nfrom boto.s3.connection import S3Connection\nimport boto3\n\nimport subprocess\nimport sys\nimport pandas as pd\nfrom io import StringIO\n\ntable_name = 'drnewm3fdta_CPNMAS'\nfile_name_pref = 'DTA3_CPNMAS/'\nbucket_name = 'iprosis-test-1'\nfile_size = 200000\n\n\n\napi_auth=HTTPBasicAuth('mattilion', 'D0etvXf2bOv$')\n#def install(package):\n#    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n\n#install('pandas')\n#api_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/drusactda_CSYTABS?$skip=10&$top=10&$count=true\"\napi_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/%s\" % (table_name)\ns3 = boto3.resource('s3')\nfile_counter = 1\nfirst_loop = True\nnumber_of_rows = 0\nwhile api_url != '':\n  response = requests.get(api_url,auth=api_auth,headers={\"Prefer\": \"odata.maxpagesize=50000\"})\n  response_json = response.json()\n  \n  if \"@odata.nextLink\" in response_json:\n    api_url = 'https' + response_json['@odata.nextLink'][4:]       \n  else:\n    api_url = ''\n  chunk_df = pd.DataFrame(response_json['value'])\n  \n  if first_loop:\n    main_df = chunk_df\n    first_loop = False\n    number_of_rows = len(chunk_df.index)\n  elif number_of_rows >= file_size or api_url == '':\n    csv_buffer = StringIO()\n    main_df.to_csv(csv_buffer,index=False)\n    file_name = file_name_pref + str(file_counter) + '.csv'\n    object = s3.Object(bucket_name, file_name)\n    object.put(Body=csv_buffer.getvalue())\n    main_df = chunk_df\n    number_of_rows = len(chunk_df.index)\n    file_counter = file_counter + 1\n  else:\n    frames = [main_df, chunk_df]\n    main_df = pd.concat(frames)\n    number_of_rows = number_of_rows + len(chunk_df.index)\n\t\n#    \n#print(json.dumps(response.json(), indent=2))\n# = pd.read_json(response.json(), orient='index')\n#\n#print(pdObj)\n#print(json.dumps(response.json(), indent=2))\n#context.updateVariable('val_skip', 100)\n\n\n#object.put(Body=response.read())\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"7200000"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"8431":{"id":8431,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":-32,"y":-48,"width":32,"height":32,"inputConnectorIDs":[8446],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DTA3 OCUSMA"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print (myvar)\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nfrom boto.s3.connection import S3Connection\nimport boto3\n\nimport subprocess\nimport sys\nimport pandas as pd\nfrom io import StringIO\n\ntable_name = 'drusactda_OCUSMAS'\nfile_name_pref = 'DTA3_OCUSMA/'\nbucket_name = 'iprosis-test-1'\nfile_size = 200000\n\n\n\napi_auth=HTTPBasicAuth('mattilion', 'D0etvXf2bOv$')\n#def install(package):\n#    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n\n#install('pandas')\n#api_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/drusactda_CSYTABS?$skip=10&$top=10&$count=true\"\napi_url = \"https://hdp.deltagalil.com/api/odata4/MATTILION_Access/%s\" % (table_name)\ns3 = boto3.resource('s3')\nfile_counter = 1\nfirst_loop = True\nnumber_of_rows = 0\nwhile api_url != '':\n  response = requests.get(api_url,auth=api_auth,headers={\"Prefer\": \"odata.maxpagesize=50000\"})\n  response_json = response.json()\n  \n  if \"@odata.nextLink\" in response_json:\n    api_url = 'https' + response_json['@odata.nextLink'][4:]       \n  else:\n    api_url = ''\n  chunk_df = pd.DataFrame(response_json['value'])\n  \n  if first_loop:\n    main_df = chunk_df\n    first_loop = False\n    number_of_rows = len(chunk_df.index)\n  elif number_of_rows >= file_size or api_url == '':\n    csv_buffer = StringIO()\n    main_df.to_csv(csv_buffer,index=False)\n    file_name = file_name_pref + str(file_counter) + '.csv'\n    object = s3.Object(bucket_name, file_name)\n    object.put(Body=csv_buffer.getvalue())\n    main_df = chunk_df\n    number_of_rows = len(chunk_df.index)\n    file_counter = file_counter + 1\n  else:\n    frames = [main_df, chunk_df]\n    main_df = pd.concat(frames)\n    number_of_rows = number_of_rows + len(chunk_df.index)\n\t\n#    \n#print(json.dumps(response.json(), indent=2))\n# = pd.read_json(response.json(), orient='index')\n#\n#print(pdObj)\n#print(json.dumps(response.json(), indent=2))\n#context.updateVariable('val_skip', 100)\n\n\n#object.put(Body=response.read())\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"7200000"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"8354":{"id":8354,"sourceID":8343,"targetID":8305},"8386":{"id":8386,"sourceID":8305,"targetID":8368},"8417":{"id":8417,"sourceID":8368,"targetID":8409},"8446":{"id":8446,"sourceID":8409,"targetID":8431}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"DRUSA_DIM_CUSTOMER","description":null,"type":"ORCHESTRATION","tag":"23749dc0-8c74-49db-9e8d-4ddc83d7e413"}}